--------------------------------------
--12

	--1
--Afișați detalii despre albumul (numele, anul în care a apărut, durata întreaga a sa în minute și numele casei de discuri a cărei aparține)
-- (de tip Album) cu cea mai lungă durată care are minim 6 cântece, alături de durata medie a unui album (de tip Album).
--ACEASTA CERINTA ARE:
--	subcereri sincronizate în care intervin 3 tabele, în blocul de cerere WITH
-- 	grupări de date, funcții grup, filtrare la nivel de grupuri cu subcereri nesincronizate (în clauza de HAVING) în care intervin cel puțin 3 tabele (în cadrul aceleiași cereri, în blocul de cerere WITH)
--	se utilizează 1 bloc de cerere WITH
--	subcerere nesincronizată în clauza FROM
--	funcție pe date calendaristice (TO_CHAR)
--	funcție pe șir de caractere (UPPER)


WITH ALBUM_DURATA AS --bloc de cerere WITH
(SELECT A.ID_ALBUM, C.DURATA
FROM ALBUM A
JOIN(
    SELECT CA.ID_ALBUM, SUM(C.LUNGIME) AS DURATA
    FROM CANTEC C
    JOIN CANTEC_ALBUM CA ON C.ID_CANTEC = CA.ID_CANTEC
    GROUP BY CA.ID_ALBUM
    HAVING COUNT(CA.ID_ALBUM)>=6) C ON C.ID_ALBUM = A.ID_ALBUM
-- funcții grup, filtrare la nivel de grupuri cu subcereri nesincronizate
WHERE UPPER(A.TIP) = 'ALBUM'--functie pe sir de caractere
)
SELECT *
FROM (
SELECT ALBM.NUME, ALBM.AN_LANSARE, AL.DURATA, ALBM.CASA_DISCURI,
       (SELECT ROUND(AVG(DURATA),2)
        FROM ALBUM_DURATA) AS DURATA_MEDIE
FROM (--subcerere nesincronizata în clauza FROM
    SELECT A.ID_ALBUM,TO_CHAR(A.DATA_LANSARE,'YYYY') AS AN_LANSARE, A.NUME, D.NUME AS CASA_DISCURI
      FROM ALBUM A-- ^ functie pe data calendaristica
      JOIN CASA_DISCURI D ON A.ID_CASA_DISCURI = D.ID_CASA_DISCURI) ALBM
JOIN ALBUM_DURATA AL ON ALBM.ID_ALBUM = AL.ID_ALBUM
ORDER BY AL.DURATA DESC
)WHERE ROWNUM = 1;


------------------------------------------------
	 --2
--Pentru fiecare album care are macar 10 ani vechime afișati titlul intreg de lansare
--(format din nume + ‘-’ + tipul albumului in felul urmator: daca e Album: Full Length Album, daca este EP: Extended Playlist,
-- daca e Single: Single Hit) alaturi de numele trupei și numele managerului de trupa (daca exista, sau daca - nu exista).
--ACEASTA CERINTA ARE:
--	o expresie de tip CASE și o expresie de tip NVL
--	2 funcții pe date calendaristice (SYSDATE, MONTHS_BETWEEN)
--	2 funcții pe șiruri de caractere (CONCAT, UPPER)
--	subcerere nesincronizată în clauza FROM
--	subcereri sincronizate în care intervin 4 tabele


SELECT CONCAT(NUME,--FUNCTIE PE SIR concat
              CASE WHEN UPPER(TIP)='ALBUM'--FUNCTIE PE SIR UPPER
                THEN ' - Full Leght Album'
                WHEN UPPER(TIP)='EP'
                THEN ' - Extended Playlist'
                WHEN UPPER(TIP)='SINGLE'
                THEN ' - Single Hit' END) AS TITLU, NUME_TRUPA, NUME_MANAGER
FROM (SELECT A.NUME, A.TIP, T.NUME_TRUPA, A.DATA_LANSARE, NVL(T.NUME_MANAGER,'-') AS NUME_MANAGER
      FROM ALBUM A
      JOIN (
          SELECT T.NUME AS NUME_TRUPA, T.ID_TRUPA, M.NUME AS NUME_MANAGER
          FROM (
              SELECT ANJ.NUME, MT.ID_TRUPA
              FROM MANAGER_TRUPA MT
              JOIN ANGAJAT ANJ ON MT.ID_ANGAJAT = ANJ.ID_ANGAJAT) M
          RIGHT OUTER JOIN TRUPA T ON T.ID_TRUPA = M.ID_TRUPA -- ca sa luam si trupele fara manageri
      )
          T ON A.ID_TRUPA = T.ID_TRUPA)
WHERE MONTHS_BETWEEN(SYSDATE, DATA_LANSARE) >= 120; -- FUNCTIE PE DATA CALENDARISTICA
--SYSDATE, SI MONTHS BETWEEN


-----------------------------------------------
	--3
--Afișați numele, salariul, noul salariu, departamentul și tipul de angajat astfel încât pentru noul salariu
--managerii de trupă primesc spor de 50%, administratorii de contracte de 40%, cercetătorii de marketing de 30%,
-- inginerii audio de 45% iar restul angajaților de 20%. Dacă angajații nu au un tip cunoscut se va afișa ”-”.
-- Ordonați după salariul nou descrescător, respectiv după nume
--ACEASTA CERINTA ARE:
--	ordonări, NVL și DECODE în cadrul aceleași cereri
--	subcerere nesincronizată în clauza FROM
--	subcereri sincronizate în care intervin 5 tabele



SELECT NUME,SALARIU,
       SALARIU*(DECODE(TIP,'Manager Trupa', 1.5,--functia decode
                'Administrator Contracte', 1.4,
                'Cercetator Marketing', 1.3,
                'Inginer Audio', 1.45, 1.2))
    AS SALARIU_SPORIT, DEPARTAMENT, TIP
FROM (SELECT A.NUME,
             A.SALARIU,
             A.DEPARTAMENT,
             NVL(CASE --functia nvl
                     WHEN MT.ID_ANGAJAT IS NOT NULL THEN 'Manager Trupa'
                     WHEN AC.ID_ANGAJAT IS NOT NULL THEN 'Administrator Contracte'
                     WHEN CM.ID_ANGAJAT IS NOT NULL THEN 'Cercetator Marketing'
                     WHEN IA.ID_ANGAJAT IS NOT NULL THEN 'Inginer Audio'
                     END, '-') AS TIP
      FROM ANGAJAT A
               LEFT OUTER JOIN MANAGER_TRUPA MT ON A.ID_ANGAJAT = MT.ID_ANGAJAT
               LEFT OUTER JOIN ADMINISTRATOR_CONTRACTE AC ON A.ID_ANGAJAT = AC.ID_ANGAJAT
               LEFT OUTER JOIN CERCETATOR_MARKETING CM ON A.ID_ANGAJAT = CM.ID_ANGAJAT
               LEFT OUTER JOIN INGINER_AUDIO IA ON A.ID_ANGAJAT = IA.ID_ANGAJAT)
ORDER BY SALARIU_SPORIT DESC, NUME; --ordonare


---------------------------------------
	--4
--Pentru fiecare muzician, afisati numele si numarul de instrumente la care acesta are access
--si pe care le pot folosi.
--De asemenea, afisati daca acesta mai are contracte valide
--ACEASTA CERINTA ARE:
--	se utilizeaza 1 bloc de cerere WITH
--	o funcție grup
--	o expresie de tip CASE
--	SYSDATE, funcție de tip dată calendaristică
--	subcerere nesincronizata în clauza FROM


WITH IM AS (
    SELECT M.ID_MUZICIAN, COUNT(ID_INSTRUMENT) AS NR_INSTRUMENTE_ACESS
FROM(SELECT M.ID_MUZICIAN, MT.POZITIE, MT.ID_TRUPA
    FROM MUZICIAN M
    JOIN MEMBRU_TRUPA MT ON M.ID_MUZICIAN = MT.ID_MUZICIAN) M
LEFT OUTER JOIN (
    SELECT I.ID_INSTRUMENT, I.UTILIZATOR, T.ID_TRUPA
    FROM TRUPA T
    JOIN INSTRUMENT I ON T.ID_TRUPA = I.ID_TRUPA
) I ON I.ID_TRUPA = M.ID_TRUPA AND  I.UTILIZATOR = M.POZITIE
GROUP BY ID_MUZICIAN
)
SELECT MI.NUME, MI.NR_INSTRUMENTE_ACESS,
       CASE WHEN C.DATA_EXPIRARE < SYSDATE THEN 'CONTRACT EXPIRAT'
        ELSE 'CONTRACT VALID' END AS STARE_CONTRACT
FROM (
    SELECT M.ID_MUZICIAN, M.NUME, IM.NR_INSTRUMENTE_ACESS
    FROM MUZICIAN M
    JOIN IM ON IM.ID_MUZICIAN=M.ID_MUZICIAN
     ) MI
JOIN CONTRACT C ON C.ID_MUZICIAN = MI.ID_MUZICIAN;


-------------------------------------
	--5
--Pentru fiecare muzician, afisati numarul de minute total
--al cantecelor la care acesta a contribuit
--si ordonati descrescator dupa acest numar
--ACEASTA CERINTA ARE:
--	subcereri nesincronizate în clauza FROM
--	grupare
--	ordonare
--	intervin 4 tabele
-- subcerere sincronizata

SELECT MTC.NUME, SUM(C.LUNGIME) AS MINUTE_TOTAL,
       (SELECT COUNT(*)
        FROM TRUPA_CANTEC TC3
        JOIN MEMBRU_TRUPA MT3 ON TC3.ID_TRUPA = MT3.ID_TRUPA
        WHERE MTC.ID_MUZICIAN = MT3.ID_MUZICIAN) AS NUMAR_CANTECE
FROM(
    SELECT MT2.ID_MUZICIAN, MT2.NUME, TC.ID_CANTEC
    FROM(
        SELECT M.ID_MUZICIAN, M.NUME, MTT.ID_TRUPA
        FROM MUZICIAN M
        JOIN (
            SELECT MT.ID_TRUPA, MT.ID_MUZICIAN
            FROM MEMBRU_TRUPA MT
            JOIN TRUPA T ON MT.ID_TRUPA = T.ID_TRUPA
        )MTT ON MTT.ID_MUZICIAN = M.ID_MUZICIAN) MT2
    JOIN TRUPA_CANTEC TC ON TC.ID_TRUPA = MT2.ID_TRUPA) MTC
JOIN CANTEC C ON MTC.ID_CANTEC = C.ID_CANTEC
GROUP BY MTC.ID_MUZICIAN, MTC.NUME
ORDER BY MINUTE_TOTAL DESC;


---------------------------------------------------------------
--13
--stergerea contractelor EXPIRATE
DELETE FROM CONTRACT
WHERE ID_CONTRACT IN (
    SELECT C.ID_CONTRACT
    FROM CONTRACT C
    WHERE (CASE WHEN C.DATA_EXPIRARE >= SYSDATE THEN 1
                ELSE 0 END) = 0
);

--marirea salariilor cu 15% angajatilor angajati acum 5 sau mai multi ani
UPDATE ANGAJAT
SET SALARIU = SALARIU*1.15
WHERE ID_ANGAJAT IN (
    SELECT ID_ANGAJAT
    FROM ANGAJAT
    WHERE MONTHS_BETWEEN(SYSDATE, DATA_ANGAJARE) >= 60
);


--alterarea specialitatii inginerilor audio
--care au un subtip de rock la doar rock
UPDATE INGINER_AUDIO
SET SPECIALITATE_GEN = 'Rock'
WHERE ID_INGINER_AUDIO IN(
    SELECT ID_INGINER_AUDIO
    FROM INGINER_AUDIO
    WHERE UPPER(SPECIALITATE_GEN) LIKE '%ROCK%'
);



-----------------------------------------------
--14
--Creați un view care să afișeze pentru fiecare trupă id-ul, numele, genul, data înființării, numărul de cântece sub numele acesteia --și generația căreia aparține în funcție de vechime astfel:
--dacă a fost lansată acum mai puțin de 5 ani este Contemporan, peste 5 ani însă mai puțin de 20 de ani este Retro, iar mai vechi este Vintage.
CREATE OR REPLACE VIEW DETALII_TRUPA AS
    SELECT T.ID_TRUPA, T.NUME, T.GEN, T.DATA_INFIINTARE, NR_CANTECE,
           CASE WHEN MONTHS_BETWEEN(SYSDATE, DATA_INFIINTARE) < 60 THEN 'Contemporan'
        WHEN MONTHS_BETWEEN(SYSDATE, DATA_INFIINTARE) < 240 THEN 'Retro'
        ELSE 'Vintage' END AS GENERATIE
    FROM TRUPA T
    JOIN( SELECT T.ID_TRUPA, COUNT(ID_CANTEC) AS NR_CANTECE
        FROM TRUPA T
         LEFT OUTER JOIN TRUPA_CANTEC TC ON T.ID_TRUPA = TC.ID_TRUPA
        GROUP BY T.ID_TRUPA) NRC ON NRC.ID_TRUPA = T.ID_TRUPA;

--operatie LMD permisa
INSERT INTO DETALII_TRUPA(NUME, GEN, DATA_INFIINTARE)
VALUES ('Silent Hill', 'Metal Rock', DATE '1995-02-17');


--operatie LMD nepermisa
INSERT INTO DETALII_TRUPA(NUME, DATA_INFIINTARE)
VALUES ('Vixens', DATE '1935-04-23');
--deoarece campul 'GEN' nu poate fi null

SELECT * FROM DETALII_TRUPA

------------------------------------------------
--15
--outer join pe 4 tabele
--Pentru fiecare angajat, afisati titlul, format din numele acestuia si tipul sau
--Daca nu are tip, va fi numele departamentului.
--Ordonati dupa nume

SELECT A.NUME || ' - ' ||
NVL(CASE --functia nvl
     WHEN MT.ID_ANGAJAT IS NOT NULL THEN 'Manager Trupa'
     WHEN AC.ID_ANGAJAT IS NOT NULL THEN 'Administrator Contracte'
     WHEN CM.ID_ANGAJAT IS NOT NULL THEN 'Cercetator Marketing'
     WHEN IA.ID_ANGAJAT IS NOT NULL THEN 'Inginer Audio'
     END, 'Departament ' || A.DEPARTAMENT) AS TITLTU
FROM ANGAJAT A
FULL OUTER JOIN MANAGER_TRUPA MT ON A.ID_ANGAJAT = MT.ID_ANGAJAT
FULL OUTER JOIN ADMINISTRATOR_CONTRACTE AC ON A.ID_ANGAJAT = AC.ID_ANGAJAT
FULL OUTER JOIN CERCETATOR_MARKETING CM ON A.ID_ANGAJAT = CM.ID_ANGAJAT
FULL OUTER JOIN INGINER_AUDIO IA ON A.ID_ANGAJAT = IA.ID_ANGAJAT
ORDER BY A.NUME;


--Division
--Sa se afiseze numele tuturor cantecelor care apar in toate albumele lansate in 2024
SELECT NUME
FROM CANTEC
WHERE ID_CANTEC IN(
    SELECT DISTINCT C.ID_CANTEC
    FROM CANTEC C
    WHERE NOT EXISTS(
        (SELECT ID_ALBUM
        FROM ALBUM
        WHERE EXTRACT(YEAR FROM DATA_LANSARE) = 2024)
        MINUS
        (SELECT A.ID_ALBUM
        FROM ALBUM A
        JOIN CANTEC_ALBUM CA ON A.ID_ALBUM = CA.ID_ALBUM
        AND CA.ID_CANTEC = C.ID_CANTEC)
    ));


--ANALIZA TOP-N
--Afisati detalii despre membrii celor mai vechi 2 trupe
SELECT M.NUME, M.ZI_NASTERE, M.GEN
FROM (
    SELECT M2.NUME, M2.ZI_NASTERE, M2.GEN, MT.ID_TRUPA
    FROM MUZICIAN M2
    JOIN MEMBRU_TRUPA MT ON M2.ID_MUZICIAN = MT.ID_MUZICIAN
     ) M
JOIN(SELECT ID_TRUPA
     FROM (SELECT ID_TRUPA
           FROM TRUPA
           ORDER BY DATA_INFIINTARE)
     WHERE ROWNUM <= 2) T ON M.ID_TRUPA = T.ID_TRUPA;


SELECT C.NUME, C.LUNGIME
FROM (
    SELECT C.NUME, C.LUNGIME, CA.ID_ALBUM
    FROM CANTEC C
    JOIN CANTEC_ALBUM CA ON C.ID_CANTEC = CA.ID_CANTEC
    WHERE C.LUNGIME >= 3) C
JOIN (
SELECT ID_ALBUM
FROM ALBUM
WHERE TIP = 'EP'
) A ON C.ID_ALBUM = A.ID_ALBUM;
